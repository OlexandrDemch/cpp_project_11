#include <iostream>
#include <vector>

using namespace std;

void merge(vector<int>& arr, int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;
 
    vector<int> L(n1), R(n2);
 
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
 
    i = 0;
    j = 0;
    k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) {
        return;
    }
    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

vector<int> mergeArrays(vector<int>& arr1, vector<int>& arr2) {
    vector<int> mergedArr(arr1.size() + arr2.size());
    int i = 0, j = 0, k = 0;
    while (i < arr1.size() && j < arr2.size()) {
        if (arr1[i] <= arr2[j]) {
            mergedArr[k] = arr1[i];
            i++;
        }
        else {
            mergedArr[k] = arr2[j];
            j++;
        }
        k++;
    }
    while (i < arr1.size()) {
        mergedArr[k] = arr1[i];
        i++;
        k++;
    }
    while (j < arr2.size()) {
        mergedArr[k] = arr2[j];
        j++;
        k++;
    }
    return mergedArr;
}

int main() {
    vector<int> arr1 = { 1, 3, 5, 7, 9 };
    vector<int> arr2 = { 2, 4, 6, 8, 10 };
    mergeSort(arr1, 0, arr1.size() - 1);
    mergeSort(arr2, 0, arr2.size() - 1);
    vector<int> mergedArr = mergeArrays(arr1, arr2);
    cout << "Merged Array: ";
    for (int i = 0; i < mergedArr.size(); i++) {
        cout << mergedArr[i] << " ";
    }
    return 0;
}
